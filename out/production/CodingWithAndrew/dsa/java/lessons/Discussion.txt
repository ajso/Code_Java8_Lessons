//=====================Data Structures and Algorithms=================
1.DATA STRUCTURES
    -It's a way to organize data.

====TYPES OF DATA STRUCTURES
    -Linear
    -Non-Linear
====LINEAR (Items organized sequentially to each other)
    -Arrays
    -LinkedList
    -Stack
    -Queue
====NON-LINEAR (They are multi-level-stored in multilevel)
    -Trees
    -Graphs

2.ALGORITHMS
    -An algorithm is a set of instructions to perform a task or to solve a give problem.
=====EXAMPLE 1.
    A recipe book is a collection of recipes in which each recipe provides a step-by-step to prepare food.
    Now, let's say you want to prepare TEA(Step-by-Step).
     1.Boil water.
     2.Put tea in the pot.
     3.Add hot water.
     4.Put hot tea into a tea cups.
     5.Do you need Sugar?
        -If YES, put sugar in the tea cup
        -If NO, do nothing.
     6.Stir, Drink and enjoy!!

NOTE: These Instructions are what we may call an algorithm.

=====EXAMPLE 2.
    Print the average of 3 given Numbers.
    An algorithm to solve this problem would be:-
    1.Perform the sum of 3 numbers.
    2.Store the sum in a variable. i.e sum.
    3.Divide the sum by 3.
    4.Store the value in a variable Avg.
    5.Print the value stored in Avg.

    ============i.e=====================
    public void findAvg(int a, int b, int c){
        int sum = a+b+c;
        int avg = sum/3;
        System.out.println(avg);
    }

NOTE: These steps would be the algorithm to perform the task.

ANALYSIS OF ALGORITHMS.
    -This deals in finding the best algorithm which urns fast and takes less in memory.

    Example.
    Writing a program to find the sum of the first n numbers.
    ====Soln1=====.
    public int findSum(int n){
        return n*(n+1)/2;
    }
    ====Soln2=====.
    public int findsum(int n){
        int sum = 0;
        for(int i =1; i<=n; i++){
            sum = sum+1;
        }
        return sum;
    }

NOTE: Both algorithms in soln1 and soln2 are correct. Therefore to determine the best algorithm btn the two we check for:-
        -Time Complexity (How much time the two algorithms are taking to complete a particular task).
        -Space Complexity (How much memory the two algorithms are consuming).

===================================TIME COMPLEXITY===========================
-The amount of time taken by an algorithm to run.
Note: the input process by the algorithm helps in determining the time complexity.

-In the above examples. soln1 will take less time to complete than soln2.

==================================SPACE COMPLEXITY==========================
-This defines the amount of memory or space taken by an algorithm to run.
-The memory required to process the input by an algorithm helps in determining the space complexity.

============ASYMPTOTIC NOTATIONS
-Are mathematical tools used to describe the running time of an algorithm in terms of input size.

============TYPES
-Omega Notation
-Big O Notation
-Theta Notation



